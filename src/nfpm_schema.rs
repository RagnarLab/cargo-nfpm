//! This file is autogenerated from the JSON schema of nFPM v2.41.3 using [QuickType].
//!
//! [QuickType]: https://app.quicktype.io/
use std::collections::HashMap;

use serde::{Deserialize, Serialize};

/// nFPM configuration definition file
#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct Config {
    pub apk: Option<ApkSpecificSettings>,
    pub arch: String,
    pub archlinux: Option<ArchlinuxSpecificSettings>,
    /// see https://github.com/goreleaser/chglog for more details
    pub changelog: Option<String>,
    pub conflicts: Option<Vec<String>>,
    pub contents: Option<Vec<ContentElement>>,
    pub deb: Option<DebSpecificSettings>,
    pub depends: Option<Vec<String>>,
    pub description: Option<String>,
    pub disable_globbing: Option<bool>,
    pub epoch: Option<String>,
    pub homepage: Option<String>,
    pub ipk: Option<IpkSpecificSettings>,
    pub license: Option<String>,
    pub maintainer: Option<String>,
    pub mtime: Option<String>,
    pub name: String,
    /// override some fields when packaging with a specific packager
    pub overrides: Option<HashMap<String, OverrideValue>>,
    pub platform: Option<String>,
    pub prerelease: Option<String>,
    pub priority: Option<String>,
    pub provides: Option<Vec<String>>,
    pub recommends: Option<Vec<String>>,
    pub release: Option<String>,
    pub replaces: Option<Vec<String>>,
    pub rpm: Option<RpmSpecificSettings>,
    pub scripts: Option<ScriptsToExecute>,
    pub section: Option<String>,
    pub suggests: Option<Vec<String>>,
    pub umask: Option<i64>,
    pub vendor: Option<String>,
    pub version: String,
    pub version_metadata: Option<String>,
    pub version_schema: Option<VersionSchema>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct ApkSpecificSettings {
    pub arch: Option<String>,
    pub scripts: Option<ApkScripts>,
    pub signature: Option<ApkSignature>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct ApkScripts {
    pub postupgrade: Option<String>,
    pub preupgrade: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct ApkSignature {
    pub key_file: Option<String>,
    pub key_id: Option<String>,
    pub key_name: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct ArchlinuxSpecificSettings {
    pub arch: Option<String>,
    pub packager: Option<String>,
    pub pkgbase: Option<String>,
    pub scripts: Option<ArchlinuxSpecificScripts>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct ArchlinuxSpecificScripts {
    pub postupgrade: Option<String>,
    pub preupgrade: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct ContentElement {
    pub dst: String,
    pub expand: Option<bool>,
    pub file_info: Option<FileInfo>,
    pub packager: Option<String>,
    pub src: Option<String>,
    #[serde(rename = "type")]
    pub confi_type: Option<Type>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum Type {
    Config,
    #[serde(rename = "config|noreplace")]
    ConfigNoreplace,
    Dir,
    #[default]
    #[serde(rename = "")]
    Empty,
    Ghost,
    Symlink,
    Tree,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct FileInfo {
    pub group: Option<String>,
    pub mode: Option<i64>,
    pub mtime: Option<String>,
    pub owner: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct DebSpecificSettings {
    pub arch: Option<String>,
    pub breaks: Option<Vec<String>>,
    pub compression: Option<DebCompression>,
    pub fields: Option<HashMap<String, String>>,
    pub predepends: Option<Vec<String>>,
    pub scripts: Option<Scripts>,
    pub signature: Option<Signature>,
    pub triggers: Option<Triggers>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum DebCompression {
    #[default]
    Gzip,
    None,
    Xz,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct Scripts {
    pub config: Option<String>,
    pub rules: Option<String>,
    pub templates: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct Signature {
    pub key_file: Option<String>,
    pub key_id: Option<String>,
    pub method: Option<MethodRole>,
    pub signer: Option<String>,
    #[serde(rename = "type")]
    pub signature_type: Option<SignerRole>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum MethodRole {
    #[default]
    Debsign,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum SignerRole {
    Archive,
    Maint,
    #[default]
    Origin,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct Triggers {
    pub activate: Option<Vec<String>>,
    pub activate_await: Option<Vec<String>>,
    pub activate_noawait: Option<Vec<String>>,
    pub interest: Option<Vec<String>>,
    pub interest_await: Option<Vec<String>>,
    pub interest_noawait: Option<Vec<String>>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct IpkSpecificSettings {
    pub abi_version: Option<String>,
    pub alternatives: Option<Vec<Alternative>>,
    pub arch: Option<String>,
    pub auto_installed: Option<bool>,
    pub essential: Option<bool>,
    pub fields: Option<HashMap<String, String>>,
    pub predepends: Option<Vec<String>>,
    pub tags: Option<Vec<String>>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct Alternative {
    pub link_name: Option<String>,
    pub priority: Option<i64>,
    pub target: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct OverrideValue {
    pub apk: Option<ApkSpecificSettings>,
    pub archlinux: Option<ArchlinuxSpecificSettings>,
    pub conflicts: Option<Vec<String>>,
    pub contents: Option<Vec<ContentElement>>,
    pub deb: Option<DebSpecificSettings>,
    pub depends: Option<Vec<String>>,
    pub ipk: Option<IpkSpecificSettings>,
    pub provides: Option<Vec<String>>,
    pub recommends: Option<Vec<String>>,
    pub replaces: Option<Vec<String>>,
    pub rpm: Option<RpmSpecificSettings>,
    pub scripts: Option<ScriptsToExecute>,
    pub suggests: Option<Vec<String>>,
    pub umask: Option<i64>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct RpmSpecificSettings {
    pub arch: Option<String>,
    pub compression: Option<RpmCompression>,
    pub group: Option<String>,
    pub packager: Option<String>,
    pub prefixes: Option<Vec<String>>,
    pub scripts: Option<RpmSpecificScripts>,
    pub signature: Option<RpmSignature>,
    pub summary: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum RpmCompression {
    #[default]
    Gzip,
    Lzma,
    Xz,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct RpmSpecificScripts {
    pub posttrans: Option<String>,
    pub pretrans: Option<String>,
    pub verify: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct RpmSignature {
    pub key_file: Option<String>,
    pub key_id: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
pub struct ScriptsToExecute {
    pub postinstall: Option<String>,
    pub postremove: Option<String>,
    pub preinstall: Option<String>,
    pub preremove: Option<String>,
}

#[derive(Debug, Default, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum VersionSchema {
    None,
    #[default]
    Semver,
}
