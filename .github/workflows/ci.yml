name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule: [cron: "40 1 * * *"]

permissions:
  contents: read

env:
  RUSTFLAGS: -Dwarnings
  CARGO_TERM_COLOR: always

jobs:
  pre_ci:
    uses: ./.github/workflows/pre_ci.yml

  test-linux:
    name: Rust ${{matrix.rust}}
    needs: pre_ci
    if: needs.pre_ci.outputs.continue
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly, beta, stable]
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
          components: rust-src
      - uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Enable type layout randomization
        run: echo RUSTFLAGS=${RUSTFLAGS}\ -Zrandomize-layout >> $GITHUB_ENV
        if: matrix.rust == 'nightly'
      - run: cargo nextest run
      # - uses: actions/upload-artifact@v4
      #   if: matrix.rust == 'nightly' && always()
      #   with:
      #     name: Cargo.lock
      #     path: Cargo.lock

  test-macos:
    name: Rust ${{matrix.rust}}
    needs: pre_ci
    if: needs.pre_ci.outputs.continue
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly, beta, stable]
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
          components: rust-src
      - uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Enable type layout randomization
        run: echo RUSTFLAGS=${RUSTFLAGS}\ -Zrandomize-layout >> $GITHUB_ENV
        if: matrix.rust == 'nightly'
      - run: cargo nextest run

  test-windows:
    name: Rust ${{matrix.rust}}
    needs: pre_ci
    if: needs.pre_ci.outputs.continue
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly, beta, stable]
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
          components: rust-src
      - uses: taiki-e/install-action@v2
        with:
          tool: nextest
      - name: Enable type layout randomization
        run: echo RUSTFLAGS=${RUSTFLAGS}\ -Zrandomize-layout >> $GITHUB_ENV
        if: matrix.rust == 'nightly'
      - run: cargo nextest run

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rust-src
      - run: cargo clippy --tests --workspace

  # miri:
  #   name: Miri
  #   needs: pre_ci
  #   if: needs.pre_ci.outputs.continue
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 45
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@miri
  #     - run: cargo miri setup
  #     - run: cargo miri test
  #       env:
  #         # parking_lot doesn't support strict provenance yet.
  #         # MIRIFLAGS: -Zmiri-strict-provenance
  #         MIRIFLAGS: -Zmiri-permissive-provenance

  # outdated:
  #   name: Outdated
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'pull_request'
  #   timeout-minutes: 45
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: dtolnay/install@cargo-outdated
  #     # We don't want to report an error when we find outdated dependencies.
  #     # Oftentimes, we use outdated dependencies because of our MSRV requirements.
  #     - run: cargo outdated --workspace --exit-code 0

  deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny
      - run: cargo deny --all-features check
